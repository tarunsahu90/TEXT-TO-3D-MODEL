
import { GoogleGenAI } from "@google/genai";
import type { GeneratedModel } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function generate3dModel(prompt: string): Promise<GeneratedModel> {
  try {
    const enhancedPrompt = `Photorealistic 3D model render of ${prompt}, showcasing intricate details. Trending on ArtStation, cinematic studio lighting, clean background, 8K UHD.`;

    const [imageResponse, titleResponse] = await Promise.all([
      ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: enhancedPrompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
      }),
      ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: `Generate a short, cool, and creative title (2-4 words) for a 3D model based on this description: "${prompt}". Just return the title, nothing else.`,
      })
    ]);

    if (!imageResponse.generatedImages || imageResponse.generatedImages.length === 0) {
      throw new Error("No image was generated by the API.");
    }

    const base64ImageBytes = imageResponse.generatedImages[0].image.imageBytes;
    const imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;
    
    const title = titleResponse.text.trim().replace(/"/g, '');

    return { imageUrl, title };

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Gemini API Error: ${error.message}`);
    }
    throw new Error("An unknown error occurred while communicating with the Gemini API.");
  }
}
